# Using this version string helps with some older docker-compose versions that
# we regularly encounter. It also ensures the 'extend' feature works.
version: "2.4"

# NB: use of this file by 'docker-compose' depends on configuration settings
# found in 'defaults.env'. This means you must either;
#
# (a) pass '--env-file=defaults.env' to docker-compose,
# (b) source defaults.env into the environment that will run docker-compose, or
# (c) create a symlink from '.env' -> 'defaults.env' so that docker-compose
#     picks up them up automatically.
#
# We contemplated two alternatives to these requirements;
#
# 1. rename the default settings file to '.env', so that docker-compose would
#    pick it up automatically. Rejected: that would hide the one file that we
#    most want first-time users to find.
# 2. put an '.env' -> 'defaults.env' symlink into version control, so that
#    suggestion (c) is pre-arranged. Rejected: we want the HCP code to pose as
#    few portability and filesystem-specific challenges going forward, and
#    committing symlinks into version control seemed a backwards step in this
#    regard.
#
# PLEASE READ 'defaults.env'!! It not only provides settings, it also provides
# a lot of explanatory content. (Which is the reason this comment is the last
# piece of documentation you'll see in this file.)

volumes:
    fqdn:
    enrolldb:
    attestdb:
    tpm_aclient:
    tpmsocket_aclient:
    kdc:
    tpm_kdc:
    tpmsocket_kdc:

networks:
    hcpnetwork:
        internal: true

services:

    common:
        image: ${HCP_IMAGE_COMMON}
        command: /hcp/common/launcher.sh
        domainname: avoid-me-domain
        volumes:
          - fqdn:${HCP_FQDN_PATH}:rw
          - ${HCP_TOP}/usecase:/usecase:ro

    emgmt:
        extends: common
        image: ${HCP_IMAGE_ENROLLSVC}
        networks:
          - hcpnetwork
        volumes:
          - enrolldb:${HCP_EMGMT_STATE}:rw
          - ${HCP_TESTCREDS_ENROLLSIGNER}:${HCP_EMGMT_CREDS_SIGNER}:ro
          - ${HCP_TESTCREDS_ENROLLCERTISSUER}:${HCP_EMGMT_CREDS_CERTISSUER}:ro
        environment:
          - HCP_INSTANCE=/usecase/emgmt.env
        healthcheck:
            test: curl -f -G http://localhost:5000/ || exit 1
            timeout: 1s
            interval: 2s

    erepl:
        extends: common
        image: ${HCP_IMAGE_ENROLLSVC}
        networks:
          - hcpnetwork
        volumes:
          - enrolldb:${HCP_EREPL_STATE}:ro
        environment:
          - HCP_INSTANCE=/usecase/erepl.env
        healthcheck:
            test: git ls-remote --heads git://localhost/enrolldb || exit 1
            timeout: 1s
            interval: 2s

    arepl:
        extends: common
        image: ${HCP_IMAGE_ATTESTSVC}
        networks:
          - hcpnetwork
        volumes:
          - attestdb:${HCP_AREPL_STATE}:rw
        environment:
          - HCP_INSTANCE=/usecase/arepl.env
        healthcheck:
            test: test -f /attestdb/initialized && ! test -f /attestdb/transient-failure
            timeout: 1s
            interval: 2s

    ahcp:
        extends: common
        image: ${HCP_IMAGE_ATTESTSVC}
        networks:
          - hcpnetwork
        volumes:
          - attestdb:${HCP_AREPL_STATE}:ro
        environment:
          - HCP_INSTANCE=/usecase/ahcp.env
        healthcheck:
            test: curl -f -G http://localhost:8080/ || exit 1
            timeout: 1s
            interval: 2s

    orchestrator:
        extends: common
        image: ${HCP_IMAGE_TOOLS}
        networks:
          - hcpnetwork
        volumes:
          - ${HCP_ORCHESTRATOR_JSON}:${HCP_ORCH_JSON}:ro
          - tpm_aclient:${HCP_ORCH_TPM_ACLIENT}
          - tpm_kdc:${HCP_ORCH_TPM_KDC1}
        environment:
          - HCP_INSTANCE=/usecase/orchestrator.env

    aclient:
        extends: common
        image: ${HCP_IMAGE_TOOLS}
        networks:
          - hcpnetwork
        volumes:
          - tpmsocket_aclient:${HCP_ACLIENT_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_ACLIENT_CREDS_VERIFIER}:ro
        environment:
          - HCP_INSTANCE=/usecase/aclient.env
    aclient_tpm:
        extends: common
        image: ${HCP_IMAGE_SWTPMSVC}
        network_mode: "none"
        volumes:
          - tpm_aclient:${HCP_ACLIENTTPM_STATE}
          - tpmsocket_aclient:${HCP_ACLIENTTPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/aclient_tpm.env
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s

    caboodle_alone:
        extends: common
        image: ${HCP_IMAGE_CABOODLE}
        networks:
          - hcpnetwork
        environment:
          - HCP_INSTANCE=/usecase/caboodle_alone.env
        volumes:
          - ${HCP_ORCHESTRATOR_JSON}:/fleet.json:ro
    caboodle_test:
        extends: caboodle_alone
        environment:
          - HCP_INSTANCE=/usecase/caboodle_test.env
    caboodle_networked:
        extends: caboodle_alone
        environment:
          - HCP_INSTANCE=/usecase/caboodle_networked.env
        volumes:
          - tpmsocket_aclient:${HCP_ACLIENT_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_ACLIENT_CREDS_VERIFIER}:ro

    kdc:
        extends: common
        image: ${HCP_IMAGE_KDC}
        volumes:
          - kdc:${HCP_KDC1_STATE}
          - tpmsocket_kdc:${HCP_KDC1_ATTEST_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_KDC1_ATTEST_CREDS_VERIFIER}:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_INSTANCE=/usecase/kdc.env
    kdc_tpm:
        extends: common
        image: ${HCP_IMAGE_SWTPMSVC}
        network_mode: "none"
        volumes:
          - tpm_kdc:${HCP_KDC1TPM_STATE}
          - tpmsocket_kdc:${HCP_KDC1TPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/kdc_tpm.env
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s
