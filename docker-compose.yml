# Using this version string helps with some older docker-compose versions that
# we regularly encounter.
version: "3.0"

# Persistent state for the services. (enrollsvc and attestsvc are actually two
# services/containers each - one container mounts the volume read-write and the
# other mounts it read-only.)
volumes:
    enrolldb:
    attestdb:
    swtpm:
    tpmsocket:

networks:
    hcpnetwork:

# Some notes about the services
# - The enrollsvc and attestsvc services actually consist of two sub-services,
#   that perform different functions but operate on the same state, one of them
#   mounting that state read-only and the other mounting it read-write.
# - The healthcheck mechanisms used here run on tight intervals in order to
#   improve the UX for dev and debug. Prod usage would likely reduce the
#   candence of health-checking. (The time it takes for a service to be
#   healthchecked as "healthy" is the same as the time _between_ healthchecks.)
# - It is entirely artificial to have all these services running under the same
#   host with the same docker-compose config. Again, it's a dev+debug thing.
#   Just in case you were wondering.
# - We can't use "profiles", because they're too recent in the spec and most
#   distros have a docker-compose that's too old. Otherwise, we could do;
#       docker-compose --profile background up -d   # to start background stuff
#       docker-compose --profile foreground up      # to run tests
#       docker-compose down -v                      # to clean up
#   Instead, we have to name the individual services;
#       docker-compose up -d \
#               enrollsvc_mgmt enrollsvc_repl \
#               attestsvc_repl attestsvc_hcp \
#               swtpmsvc
#       docker-compose up client
#       docker-compose down -v
services:

    ####  The enrollment service
    enrollsvc_mgmt:
        image: hcp_enrollsvc:devel
        command: /hcp/enrollsvc/run_mgmt.sh
        volumes:
          - enrolldb:/enrolldb:rw
          - ./output/creds/enrollsig:/enrollsig:ro
          - ./output/creds/enrollca:/enrollca:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_ENROLLSVC_STATE_PREFIX=/enrolldb
          - HCP_ENROLLSVC_SIGNER=/enrollsig
          - HCP_ENROLLSVC_GENCERT=/enrollca
          - HCP_ENROLLSVC_REALM=FOO.NOWHERE.XYZ
        healthcheck:
            test: curl -f -G http://localhost:5000/ || exit 1
            timeout: 1s
            interval: 2s
    enrollsvc_repl:
        image: hcp_enrollsvc:devel
        command: /hcp/enrollsvc/run_repl.sh
        volumes:
          - enrolldb:/enrolldb:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_ENROLLSVC_STATE_PREFIX=/enrolldb
        healthcheck:
            test: git ls-remote --heads git://localhost/enrolldb || exit 1
            timeout: 1s
            interval: 2s

    ####  The attestation service
    attestsvc_repl:
        image: hcp_attestsvc:devel
        command: /hcp/attestsvc/run_repl.sh
        volumes:
          - attestdb:/attestdb:rw
        networks:
          - hcpnetwork
        environment:
          - HCP_ATTESTSVC_STATE_PREFIX=/attestdb
          - HCP_ATTESTSVC_REMOTE_REPO=git://enrollsvc_repl/enrolldb
          - HCP_ATTESTSVC_UPDATE_TIMER=10
        healthcheck:
            test: test -f /attestdb/initialized && test ! -f /attestdb/transient-failure
            timeout: 1s
            interval: 2s
    attestsvc_hcp:
        image: hcp_attestsvc:devel
        command: /hcp/attestsvc/run_hcp.sh
        volumes:
          - attestdb:/attestdb:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_ATTESTSVC_STATE_PREFIX=/attestdb
        healthcheck:
            test: curl -f -G http://localhost:8080/ || exit 1
            timeout: 1s
            interval: 2s

    #### The software TPM service
    swtpmsvc:
        image: hcp_swtpmsvc:devel
        command: /hcp/swtpmsvc/run_swtpm.sh
        volumes:
          - swtpm:/swtpm
          - tpmsocket:/tpmsocket
        networks:
          - hcpnetwork
        environment:
          - HCP_SWTPMSVC_STATE_PREFIX=/swtpm
          - HCP_SWTPMSVC_ENROLL_HOSTNAME=myhost
          - HCP_SOCKET=/tpmsocket/tpm
          - HCP_SWTPMSVC_ENROLL_API=http://enrollsvc_mgmt:5000
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s
    swtpmsvc_setup:
        extends: swtpmsvc
        command: /hcp/swtpmsvc/setup_swtpm.sh
    swtpmsvc_setup_no_enroll:
        extends: swtpmsvc_setup
        environment:
          - HCP_SWTPMSVC_NO_ENROLL=1

    #### The test HCP client
    client:
        image: hcp_client:devel
        command: /hcp/client/run_client.sh
        volumes:
          - tpmsocket:/tpmsocket
          - ./output/creds/enrollverif:/enrollverif:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_CLIENT_ATTEST_URL=http://attestsvc_hcp:8080
          - HCP_CLIENT_TPM2TOOLS_TCTI=swtpm:path=/tpmsocket/tpm
          - HCP_CLIENT_VERIFIER=/enrollverif
