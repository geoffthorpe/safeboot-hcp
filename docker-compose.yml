# vim: set expandtab shiftwidth=4 softtabstop=4:
# Using this version string helps with some older docker-compose versions that
# we regularly encounter. It also ensures the 'extend' feature works.
version: "2.4"

# NB: use of this file by 'docker-compose' depends on configuration settings
# found in 'defaults.env'. This means you must either;
#
# (a) pass '--env-file=defaults.env' to docker-compose,
# (b) source defaults.env into the environment that will run docker-compose, or
# (c) create a symlink from '.env' -> 'defaults.env' so that docker-compose
#     picks up them up automatically.
#
# We contemplated two alternatives to these requirements;
#
# 1. rename the default settings file to '.env', so that docker-compose would
#    pick it up automatically. Rejected: that would hide the one file that we
#    most want first-time users to find.
# 2. put an '.env' -> 'defaults.env' symlink into version control, so that
#    suggestion (c) is pre-arranged. Rejected: we want the HCP code to pose as
#    few portability and filesystem-specific challenges going forward, and
#    committing symlinks into version control seemed a backwards step in this
#    regard.
#
# PLEASE READ 'defaults.env'!! It not only provides settings, it also provides
# a lot of explanatory content. (Which is the reason this comment is the last
# piece of documentation you'll see in this file.)

volumes:
    fqdn:
    enrolldb:
    attestdb:
    kdc_primary:
    kdc_secondary:
    sherver:
    tpm_aclient:
    tpmsocket_aclient:
    tpm_kdc_primary:
    tpmsocket_kdc_primary:
    tpm_kdc_secondary:
    tpmsocket_kdc_secondary:
    tpm_sherver:
    tpmsocket_sherver:

networks:
    emgmt_private:
        internal: true
    kdc_primary_private:
        internal: true
    kdc_secondary_private:
        internal: true
    hcpnetwork:
        internal: true

services:

    common:
        image: ${HCP_IMAGE_caboodle}
        init: true
        volumes:
          - fqdn:${HCP_FQDN_PATH}:rw
          - ${HCP_TOP}/usecase:/usecase:ro
        environment:
          - HCP_ENTRYPOINT_EXCEPT=bash
        #  - VERBOSE=1

# Enrollment svc, mgmt interface
    emgmt:
        extends: common
        image: ${HCP_IMAGE_enrollsvc}
        networks:
          - hcpnetwork
          - emgmt_private
        volumes:
          - enrolldb:${HCP_EMGMT_STATE}:rw
          - ${HCP_TESTCREDS_ENROLLSIGNER}:${HCP_EMGMT_CREDS_SIGNER}:ro
          - ${HCP_TESTCREDS_ENROLLCERTISSUER}:${HCP_EMGMT_CREDS_CERTISSUER}:ro
          - ${HCP_TESTCREDS_ENROLLCERTCHECKER}:${HCP_EMGMT_CREDS_CERTCHECKER}:ro
          - ${HCP_TESTCREDS_ENROLLCLIENT}:${HCP_EMGMT_CREDS_CLIENTCERT}:ro
          - ${HCP_TESTCREDS_ENROLLSERVER}:${HCP_EMGMT_NGINX_CERT}:ro
          - ${HCP_TOP}/vendors:/vendors:ro
        environment:
          - HCP_INSTANCE=/usecase/emgmt.env
          - HCP_ENTRYPOINT=/hcp/enrollsvc/run_mgmt.sh
        healthcheck:
            test: /hcp/enrollsvc/emgmt_healthcheck.sh
            timeout: 1s
            interval: 2s
    emgmt_pol:
        extends: common
        image: ${HCP_IMAGE_policysvc}
        networks:
          - emgmt_private
        environment:
          - HCP_INSTANCE=/usecase/emgmt.pol.env
          - HCP_ENTRYPOINT=/hcp/policysvc/run_policy.sh
        healthcheck:
            test: /hcp/policysvc/healthcheck.sh
            timeout: 1s
            interval: 2s

# Enrollment svc, replication interface
    erepl:
        extends: common
        image: ${HCP_IMAGE_enrollsvc}
        networks:
          - hcpnetwork
        volumes:
          - enrolldb:${HCP_EREPL_STATE}:ro
        environment:
          - HCP_INSTANCE=/usecase/erepl.env
          - HCP_ENTRYPOINT=/hcp/enrollsvc/run_repl.sh
        healthcheck:
            test: git ls-remote --heads git://localhost/enrolldb || exit 1
            timeout: 1s
            interval: 2s

# Attestation svc, replication client
    arepl:
        extends: common
        image: ${HCP_IMAGE_attestsvc}
        networks:
          - hcpnetwork
        volumes:
          - attestdb:${HCP_AREPL_STATE}:rw
        environment:
          - HCP_INSTANCE=/usecase/arepl.env
          - HCP_ENTRYPOINT=/hcp/attestsvc/run_repl.sh
        healthcheck:
            test: test -f /attestdb/initialized && ! test -f /attestdb/hcp/transient-failure
            timeout: 1s
            interval: 2s

# Attestation svc, attestation interface
    ahcp:
        extends: common
        image: ${HCP_IMAGE_attestsvc}
        networks:
          - hcpnetwork
        volumes:
          - attestdb:${HCP_AREPL_STATE}:ro
        environment:
          - HCP_INSTANCE=/usecase/ahcp.env
          - HCP_ENTRYPOINT=/hcp/attestsvc/run_hcp.sh
        healthcheck:
            test: /hcp/attestsvc/ahcp_healthcheck.sh
            timeout: 1s
            interval: 2s

# Orchestrator client (create and/or enroll TPMs). You'll typically want to
# pass "-c -e" to this to make it do something.
    orchestrator:
        extends: common
        image: ${HCP_IMAGE_tools}
        networks:
          - hcpnetwork
        volumes:
          - ${HCP_TESTCREDS_ENROLLCERTCHECKER}:${HCP_ORCH_CERTCHECKER}:ro
          - ${HCP_TESTCREDS_ENROLLCLIENT}:${HCP_ORCH_CLIENTCERT}:ro
          - tpm_aclient:${HCP_ORCH_TPM_ACLIENT}
          - tpm_kdc_primary:${HCP_ORCH_TPM_KDC_PRIMARY}
          - tpm_kdc_secondary:${HCP_ORCH_TPM_KDC_SECONDARY}
          - tpm_sherver:${HCP_ORCH_TPM_SHERVER}
        environment:
          - HCP_INSTANCE=/usecase/orchestrator.env
          - HCP_ENTRYPOINT=/hcp/tools/run_orchestrator.sh

# Attestation client
    aclient:
        extends: common
        image: ${HCP_IMAGE_tools}
        networks:
          - hcpnetwork
        volumes:
          - tpmsocket_aclient:${HCP_ACLIENT_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_ACLIENT_CREDS_VERIFIER}:ro
        environment:
          - HCP_INSTANCE=/usecase/aclient.env
          - HCP_ENTRYPOINT=/hcp/tools/run_client.sh
    aclient_tpm:
        extends: common
        image: ${HCP_IMAGE_swtpmsvc}
        network_mode: "none"
        volumes:
          - tpm_aclient:${HCP_ACLIENTTPM_STATE}
          - tpmsocket_aclient:${HCP_ACLIENTTPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/aclient_tpm.env
          - HCP_ENTRYPOINT=/hcp/swtpmsvc/run_swtpm.sh
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s

# Caboodle instance
    caboodle_alone:
        extends: common
        image: ${HCP_IMAGE_caboodle}
        networks:
          - hcpnetwork
        environment:
          - HCP_INSTANCE=/usecase/caboodle_alone.env
        volumes:
          - ${HCP_TOP}/vendors:/vendors:ro
    caboodle_test:
        extends: caboodle_alone
        environment:
          - HCP_INSTANCE=/usecase/caboodle_test.env
          - HCP_ENTRYPOINT=/usecase/caboodle_test.sh
    caboodle_networked:
        extends: caboodle_alone
        environment:
          - HCP_INSTANCE=/usecase/caboodle_networked.env
        command: bash
        volumes:
          - tpmsocket_aclient:${HCP_ACLIENT_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_ACLIENT_CREDS_VERIFIER}:ro
    caboodle_unit:
        extends: caboodle_alone
        environment:
          - HCP_INSTANCE=/unit/test.env
          - HCP_ENTRYPOINT=/unit/test.py
        volumes:
          - ${HCP_TOP}/tests/unit:/unit

# Kerberos Domain Controller - Primary
    kdc_primary:
        extends: common
        image: ${HCP_IMAGE_kdcsvc}
        volumes:
          - kdc_primary:${HCP_KDC_PRIMARY_STATE}
          - tpmsocket_kdc_primary:${HCP_KDC_PRIMARY_ATTEST_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_KDC_PRIMARY_ATTEST_CREDS_VERIFIER}:ro
        networks:
          - hcpnetwork
          - kdc_primary_private
        environment:
          - HCP_INSTANCE=/usecase/kdc_primary.env
          - HCP_ENTRYPOINT=/hcp/kdcsvc/run_kdc.sh
    kdc_primary_tpm:
        extends: common
        image: ${HCP_IMAGE_swtpmsvc}
        network_mode: "none"
        volumes:
          - tpm_kdc_primary:${HCP_KDC_PRIMARY_TPM_STATE}
          - tpmsocket_kdc_primary:${HCP_KDC_PRIMARY_TPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/kdc_primary_tpm.env
          - HCP_ENTRYPOINT=/hcp/swtpmsvc/run_swtpm.sh
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s
    kdc_primary_pol:
        extends: common
        image: ${HCP_IMAGE_policysvc}
        networks:
          - kdc_primary_private
        environment:
          - HCP_INSTANCE=/usecase/kdc_primary.pol.env
          - HCP_ENTRYPOINT=/hcp/policysvc/run_policy.sh
        healthcheck:
            test: /hcp/policysvc/healthcheck.sh
            timeout: 1s
            interval: 2s

# Kerberos Domain Controller - Secondary
    kdc_secondary:
        extends: common
        image: ${HCP_IMAGE_kdcsvc}
        volumes:
          - kdc_secondary:${HCP_KDC_SECONDARY_STATE}
          - tpmsocket_kdc_secondary:${HCP_KDC_SECONDARY_ATTEST_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_KDC_SECONDARY_ATTEST_CREDS_VERIFIER}:ro
        networks:
          - hcpnetwork
          - kdc_secondary_private
        environment:
          - HCP_INSTANCE=/usecase/kdc_secondary.env
          - HCP_ENTRYPOINT=/hcp/kdcsvc/run_kdc.sh
    kdc_secondary_tpm:
        extends: common
        image: ${HCP_IMAGE_swtpmsvc}
        network_mode: "none"
        volumes:
          - tpm_kdc_secondary:${HCP_KDC_SECONDARY_TPM_STATE}
          - tpmsocket_kdc_secondary:${HCP_KDC_SECONDARY_TPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/kdc_secondary_tpm.env
          - HCP_ENTRYPOINT=/hcp/swtpmsvc/run_swtpm.sh
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s
    kdc_secondary_pol:
        extends: common
        image: ${HCP_IMAGE_policysvc}
        networks:
          - kdc_secondary_private
        environment:
          - HCP_INSTANCE=/usecase/kdc_secondary.pol.env
          - HCP_ENTRYPOINT=/hcp/policysvc/run_policy.sh
        healthcheck:
            test: /hcp/policysvc/healthcheck.sh
            timeout: 1s
            interval: 2s

# SSH host
    sherver:
        extends: common
        image: ${HCP_IMAGE_sshsvc}
        volumes:
          - sherver:${HCP_SHERVER_STATE}:rw
          - tpmsocket_sherver:${HCP_SHERVER_ATTEST_TCTI_SOCKDIR}
          - ${HCP_TESTCREDS_ENROLLVERIFIER}:${HCP_SHERVER_ATTEST_CREDS_VERIFIER}:ro
        networks:
          - hcpnetwork
        environment:
          - HCP_INSTANCE=/usecase/sherver.env
          - HCP_ENTRYPOINT=/hcp/sshsvc/run_sshsvc.sh
    sherver_tpm:
        extends: common
        image: ${HCP_IMAGE_swtpmsvc}
        network_mode: "none"
        volumes:
          - tpm_sherver:${HCP_SHERVER_TPM_STATE}
          - tpmsocket_sherver:${HCP_SHERVER_TPM_SOCKDIR}
        environment:
          - HCP_INSTANCE=/usecase/sherver_tpm.env
          - HCP_ENTRYPOINT=/hcp/swtpmsvc/run_swtpm.sh
        healthcheck:
            test: /hcp/swtpmsvc/healthcheck.sh
            timeout: 1s
            interval: 2s
