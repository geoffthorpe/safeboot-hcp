#!/usr/bin/python3

import os
import subprocess
import sys
import json
from datetime import datetime, timezone, timedelta
from pathlib import Path

#sys.stderr = open(f"{os.environ['HOME']}/debug-reenroll", 'a')

sys.path.insert(1, '/hcp/common')
from hcp_common import log, bail, dict_val_or, env_get

# attest-enroll sends us 3 arguments (+1 for the program name, so
# len(sys.args)==4), but we only consume the first, the directory to produce
# output to.
if len(sys.argv) <= 3:
	bail(f"Wrong number of arguments: {len(sys.argv)}")

output_dir = sys.argv[1]
if not Path(output_dir).is_dir():
	bail(f"Output location is not a directory: {output_dir}")

# We generate a hint for "now" + "period". First, what is "now"?
now = datetime.now(timezone.utc)

# Error-checking? No, if assumptions and requirements aren't met; exceptions.
conf_enroll = json.loads(env_get('ENROLL_JSON'))
conf_issuer = dict_val_or(conf_enroll, 'genreenroll', {})
# If we have 'years', use that. Otherwise, if we have 'months', use that. Etc.
# Note, 'years' is treated conservatively as 365 days.
# Note, 'months' is treated conservatively as 28 days.
def get_int_or_none(k):
	ret = dict_val_or(conf_issuer, k, None)
	if ret and not isinstance(ret, int):
		bail(f"Wrong type for {k} property: {type(ret)},{ret}")
	return ret
td = timedelta()
conf_years = get_int_or_none('years')
conf_months = get_int_or_none('months')
conf_weeks = get_int_or_none('weeks')
conf_days = get_int_or_none('days')
conf_hours = get_int_or_none('hours')
conf_minutes = get_int_or_none('minutes')
conf_seconds = get_int_or_none('seconds')
if conf_years:
	td += timedelta(days = conf_years * 365)
if conf_months:
	td += timedelta(days = conf_months * 28)
if conf_weeks:
	td += timedelta(days = conf_weeks * 7)
if conf_days:
	td += timedelta(days = conf_days)
if conf_hours:
	td += timedelta(hours = conf_hours)
if conf_minutes:
	td += timedelta(minutes = conf_minutes)
if conf_seconds:
	td += timedelta(seconds = conf_seconds)
if td.seconds == 0:
	bail("Non-zero time period must be provided to genreenroll")

later = now + td

# Convention: we create a "hint-reenroll-YYYYMMDDhhmmss" file for the date/time
# corresponding to 'now'+'delta'. In this way, a script can use a glob with
# sort to get all the enrollment hints in the order they're expected to be
# acted on (not when they were created or what the period/delta was). For more
# detail, the _content_ of the file is a JSON struct with three fields;
#     last: <now>
#     next: <then>
#     seconds: <timedelta>
# <now> and <then> are strings as generated by python's datetime.isoformat()
# method on a 'datetime' object using UTC timezone. <timedelta> is an integer.
thenstr = f"{later.year:04}{later.month:02}{later.day:02}"
thenstr += f"{later.hour:02}{later.minute:02}{later.second:02}"
thenfile = f"hint-reenroll-{thenstr}"
thendata = {
	'last': f"{now.isoformat()}",
	'next': f"{later.isoformat()}",
	'seconds': td.seconds
}

with open(f"{output_dir}/{thenfile}", "w") as f:
	json.dump(thendata, f)

print(f"public {thenfile}")
