HCP_APPS_INSTALL_DEST := /hcp

HCP_APPS_BUILD_RUN := \
	docker run --rm --init --label $(HCP_IMAGE_PREFIX)all=1 \
	--mount type=bind,source=$(HCP_APPS_SRC),destination=/source,ro=true \
	--mount type=bind,source=$(HCP_APPS_OUT),destination=/put_it_here \
	$(HCP_BASE_DNAME) \
	bash -c

# Special reference file
# When a container creates <whatever>.tar.gz files in $(HCP_APPS_OUT), it needs
# to chown the output file so that's it has regular ownership on the host side,
# irrespective of whatever kind of docker system we happen to be using. It uses
# a host-created reference file for this purpose, so here's a rule to create
# it.
$(HCP_APPS_OUT)/reference: | $(HCP_APPS_OUT)
$(HCP_APPS_OUT)/reference:
	$Qtouch $@
ifneq (,$(wildcard $(HCP_APPS_OUT)/reference))
clean_apps_reference:
	$Qrm -f $(HCP_APPS_OUT)/reference
clean_apps: clean_apps_reference
endif

# app_add()
# $1 = name, per apps_create()
# $2 = batch-name, for this set of files
# $3 = chmod atttributes
# $4 = filenames (or globs), relative to src/apps/$1
# This construct the contents of an app, before calling app_finalize()
define app_add
$(eval HCP_APPS_BATCH_FILES_$1_$2 :=)
$(foreach i,$4,$(eval HCP_APPS_BATCH_FILES_$1_$2 += $(shell cd $(HCP_APPS_SRC)/$1 && ls -1 $i)))
$(eval HCP_APPS_BATCH_CHMOD_$1_$2 := $3)
$(eval HCP_APPS_BATCHES_$1 += $2)
endef

# app_finalize()
# $1 = name, and subdirectory of src/apps/
# This should be called _AFTER_ the app_add() calls that construct the app.
define app_finalize
$(eval myAllFiles :=)
$(eval myDepCmd := echo "$(HCP_APPS_OUT)/$1.tar.gz: | $(HCP_APPS_OUT)" > $(HCP_OUT)/.deps.apps.$1.tmp ;)
$(eval myDepCmd += echo "$(HCP_APPS_OUT)/$1.tar.gz: $(HCP_OUT)/.deps.apps.$1" > $(HCP_OUT)/.deps.apps.$1.tmp ;)
$(eval myBuildCmd := mkdir -p $(HCP_APPS_INSTALL_DEST)/$1 ;)
$(foreach i,$(HCP_APPS_BATCHES_$1),
	$(eval myAllFiles += $(HCP_APPS_BATCH_FILES_$1_$i))
	$(foreach j,$(HCP_APPS_BATCH_FILES_$1_$i),
	$(eval myDepCmd += echo "$(HCP_APPS_OUT)/$1.tar.gz: $(HCP_APPS_SRC)/$1/$j" >> $(HCP_OUT)/.deps.apps.$1.tmp ;))
	$(eval myBuildCmd += cd /source/$1 ;)
	$(eval myBuildCmd += cp --parents $(HCP_APPS_BATCH_FILES_$1_$i) \
				$(HCP_APPS_INSTALL_DEST)/$1/ ;)
	$(eval myBuildCmd += cd /$(HCP_APPS_INSTALL_DEST)/$1 ;)
	$(eval myBuildCmd += chmod $(HCP_APPS_BATCH_CHMOD_$1_$i) \
				$(HCP_APPS_BATCH_FILES_$1_$i) ;))
$(eval myDepCmd += if test -f $(HCP_OUT)/.deps.apps.$1 && \
	cmp $(HCP_OUT)/.deps.apps.$1 $(HCP_OUT)/.deps.apps.$1.tmp > /dev/null 2>&1; \
	then rm -f $(HCP_OUT)/.deps.apps.$1.tmp; else \
	mv $(HCP_OUT)/.deps.apps.$1.tmp $(HCP_OUT)/.deps.apps.$1; fi )
$(eval myBuildCmd += cd /put_it_here ;)
$(eval myBuildCmd += tar zcf $1.tar.gz $(HCP_APPS_INSTALL_DEST)/$1 ;)
$(eval myBuildCmd += /hcp/base/chowner.sh reference $1.tar.gz)
apps_$1: code_$1
code_$1: $(HCP_APPS_OUT)/$1.tar.gz $(HCP_APPS_OUT)/Dockerfile.stub.$1
$(eval APPS += $(HCP_APPS_OUT)/$1.tar.gz $(HCP_APPS_OUT)/Dockerfile.stub.$1)
$(HCP_APPS_OUT)/$1.tar.gz: | $(HCP_APPS_OUT)/reference
$(HCP_APPS_OUT)/$1.tar.gz: | $(HCP_BASE_TOUCHFILE)
$(HCP_APPS_OUT)/$1.tar.gz:
	$Qecho "Generating: $1.tar.gz"
	$Q$(HCP_APPS_BUILD_RUN) "$(myBuildCmd)"
$(HCP_APPS_OUT)/Dockerfile.stub.$1: | $(HCP_APPS_OUT)
$(HCP_APPS_OUT)/Dockerfile.stub.$1: $(HCP_APPS_SRC)/$1/hcp.Dockerfile
$(HCP_APPS_OUT)/Dockerfile.stub.$1:
	$Qecho "Generating: $(HCP_APPS_OUT)/Dockerfile.stub.$1"
	$Qecho "COPY apps/$1.tar.gz /" > $(HCP_APPS_OUT)/Dockerfile.stub.$1
	$Qecho "RUN tar zxf /$1.tar.gz && rm /$1.tar.gz" >> $(HCP_APPS_OUT)/Dockerfile.stub.$1
	$Qcat $(HCP_APPS_SRC)/$1/hcp.Dockerfile >> $(HCP_APPS_OUT)/Dockerfile.stub.$1

$(shell $(myDepCmd))
-include $(HCP_OUT)/.deps.apps.$1
$(eval DEPS += $(HCP_OUT)/.deps.apps.$1)
$(HCP_APPS_OUT)/$1.tar.gz: $(foreach i,$(myAllFiles),$(HCP_APPS_SRC)/$1/$i)
ifneq (,$(wildcard $(HCP_APPS_OUT)/$1.tar.gz $(HCP_APPS_OUT)/Dockerfile.stub.$1))
clean_code_$1:
	$Qrm -f $(HCP_APPS_OUT)/$1.tar.gz
	$Qrm -f $(HCP_APPS_OUT)/Dockerfile.stub.$1
clean_apps: clean_code_$1
endif
endef
