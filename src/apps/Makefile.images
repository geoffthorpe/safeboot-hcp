# app_image()
# $1 = name, produces "hcp_<name>" (or whatever HCP_PREFIX is changed to)
# $2 = ancestor, used as "hcp_<ancestor>" (or HCP_BASE_DNAME if empty)
# $3 = list of apps tarballs and corresponding Dockerfiles to consume
# $4 = list of non-apps tarballs to consume (without the ".tar.gz" suffix,
#      because we expect both that _and_ the ".Dockerfile" suffixes to exist)
# TODO: processing of $3 should be like $2, rather than the manual matching.
define app_image
$(eval myDockerInputs :=)
$(if $2,
	$(eval myBaseTouchfile := $(HCP_APPS_OUT)/image.$2)
	$(eval myBaseDname := $(call HCP_IMAGE,$2))
	,
	$(eval myBaseTouchfile := $(HCP_BASE_TOUCHFILE))
	$(eval myBaseDname := $(HCP_BASE_DNAME))
)
$(eval myImgDepCmd := echo "$(HCP_APPS_OUT)/image.$1: | $(HCP_APPS_OUT)" > $(HCP_OUT)/.deps.image.$1.tmp ;)
$(eval myImgDepCmd += echo "$(HCP_APPS_OUT)/image.$1: $(HCP_OUT)/.deps.image.$1" > $(HCP_OUT)/.deps.image.$1.tmp ;)
$(eval myDockerDepCmd := echo "$(HCP_APPS_OUT)/Dockerfile.$1: | $(HCP_APPS_OUT)" > $(HCP_OUT)/.deps.Dockerfile.$1.tmp ;)
$(eval myDockerDepCmd += echo "$(HCP_APPS_OUT)/Dockerfile.$1: $(HCP_OUT)/.deps.Dockerfile.$1" >> $(HCP_OUT)/.deps.Dockerfile.$1.tmp ;)
$(eval myDockerInputs += $(foreach i,$3,$(HCP_APPS_OUT)/Dockerfile.stub.$i))
$(foreach i,$(strip $4),
	$(eval myImgDepCmd += echo "$(HCP_APPS_OUT)/image.$1: $i.tar.gz" >> $(HCP_OUT)/.deps.image.$1.tmp ;)
	$(eval myDockerDepCmd += echo "$(HCP_APPS_OUT)/Dockerfile.$1: $i.Dockerfile" >> $(HCP_OUT)/.deps.Dockerfile.$1.tmp ;)
	$(eval myDockerInputs += $i.Dockerfile))
$(foreach i,$3,
	$(eval myImgDepCmd += echo "$(HCP_APPS_OUT)/image.$1: $(HCP_APPS_OUT)/$i.tar.gz" >> $(HCP_OUT)/.deps.image.$1.tmp ;)
	$(eval myDockerDepCmd += echo "$(HCP_APPS_OUT)/Dockerfile.$1: $(HCP_APPS_OUT)/Dockerfile.stub.$i" >> $(HCP_OUT)/.deps.Dockerfile.$1.tmp ;))
$(eval myImgDepCmd += if test -f $(HCP_OUT)/.deps.image.$1 && \
	cmp $(HCP_OUT)/.deps.image.$1 $(HCP_OUT)/.deps.image.$1.tmp > /dev/null 2>&1; \
	then rm -f $(HCP_OUT)/.deps.image.$1.tmp; else \
	mv $(HCP_OUT)/.deps.image.$1.tmp $(HCP_OUT)/.deps.image.$1; fi )
$(eval myDockerDepCmd += if test -f $(HCP_OUT)/.deps.Dockerfile.$1 && \
	cmp $(HCP_OUT)/.deps.Dockerfile.$1 $(HCP_OUT)/.deps.Dockerfile.$1.tmp > /dev/null 2>&1; \
	then rm -f $(HCP_OUT)/.deps.Dockerfile.$1.tmp; else \
	mv $(HCP_OUT)/.deps.Dockerfile.$1.tmp $(HCP_OUT)/.deps.Dockerfile.$1; fi )
$1: $(HCP_APPS_OUT)/image.$1
$(HCP_APPS_OUT)/image.$1: $(myBaseTouchfile)
$(HCP_APPS_OUT)/image.$1: $(HCP_APPS_OUT)/Dockerfile.$1
	$Qecho "Generating: $(call HCP_IMAGE,$1) (container image $1)"
	$Qdocker build \
		-t $(call HCP_IMAGE,$1) \
		-f $(HCP_APPS_OUT)/Dockerfile.$1 \
		$(HCP_OUT)
	$Qtouch $(HCP_APPS_OUT)/image.$1
$(shell $(myImgDepCmd))
-include $(HCP_OUT)/.deps.image.$1
$(eval DEPS += $(HCP_OUT)/.deps.image.$1)
$(eval myDockerInputsCmd := $(foreach i,$(myDockerInputs),cat $i >> $(HCP_APPS_OUT)/Dockerfile.$1;))
$(HCP_APPS_OUT)/Dockerfile.$1: | $(HCP_APPS_OUT)
$(HCP_APPS_OUT)/Dockerfile.$1:
	$Qecho "Generating: $(HCP_APPS_OUT)/Dockerfile.$1"
	$Qecho "FROM $(myBaseDname)" > $(HCP_APPS_OUT)/Dockerfile.$1
	$Q$(myDockerInputsCmd)
$(shell $(myDockerDepCmd))
-include $(HCP_OUT)/.deps.Dockerfile.$1
$(eval DEPS += $(HCP_OUT)/.deps.Dockerfile.$1)
$(eval APPS += $(HCP_APPS_OUT)/image.$1)
$(eval IMAGES += $1)
ifneq (,$(wildcard $(HCP_APPS_OUT)/image.$1 $(HCP_APPS_OUT)/Dockerfile.$1))
clean_image_$1:
ifneq (,$(wildcard $(HCP_APPS_OUT)/image.$1))
	$Qdocker image rm $(call HCP_IMAGE,$1)
endif
	$Qrm -f $(HCP_APPS_OUT)/image.$1
	$Qrm -f $(HCP_APPS_OUT)/Dockerfile.$1
clean_apps: clean_image_$1
endif
endef
