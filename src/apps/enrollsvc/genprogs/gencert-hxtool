#!/usr/bin/python3

import os
import requests
import subprocess
import sys
import json
from pathlib import Path

sys.stderr = open(f"{os.environ['HOME']}/debug-hxtool", 'w')

sys.path.insert(1, '/hcp/xtra')
from HcpRecursiveUnion import union

sys.path.insert(1, '/hcp/enrollsvc')
from db_common import log, bail, dict_val_or, dict_pop_or, env_get, env_get_or_none

class HcpErrorGencertHxtool(Exception):
	pass

# attest-enroll sends us 3 arguments (+1 for the program name, so
# len(sys.args)==4), but we only consume the first, the directory to produce
# output to.
if len(sys.argv) <= 3:
	bail(f"Wrong number of arguments: {len(sys.argv)}")

output_dir = sys.argv[1]
if not Path(output_dir).is_dir():
	bail(f"Output location is not a directory: {output_dir}")

policy_url = env_get_or_none('HCP_ENROLLSVC_POLICY')
if policy_url:
	request_uid = env_get('HCP_REQUEST_UID')

# Error-checking? No, if assumptions and requirements aren't met; exceptions.
conf_enroll = json.loads(env_get('ENROLL_JSON'))
conf_env = dict_val_or(conf_enroll, '__env', {})
conf_hxtool = dict_val_or(conf_enroll, 'gencert-hxtool', {})
conf_common = dict_val_or(conf_hxtool, '<common>', {})
certlist = [ x for x in dict_val_or(conf_hxtool, 'list', []) if x != '<common>' ]
certprefix = dict_val_or(conf_hxtool, 'prefix', [])

output_assets = []

for asset in certlist:
	# Each 'asset' from the list of desired certs should have a section
	# in the 'hxtool' config block, it defines the command to run!
	if asset not in conf_hxtool:
		raise HcpErrorGencertHxtool(f"asset {asset} not in JSON {conf_hxtool}")
	conf_asset = union(conf_common, conf_hxtool[asset])
	# Keep a copy for the policy check (before conf_asset gets fields popped)
	copy_asset = conf_asset.copy()
	cmd = [ 'hxtool', 'issue-certificate' ]
	# Special handling:
	# - the '--certificate' setting comes from 'name' if defined, otherwise
	#   from 'asset' itself
	# - the '--type' setting comes from 'type' (REQUIRED)
	# - any non-option args come from 'args' (OPTIONAL)
	# - all other key-value pairs (OPTIONAL) define '--key=value' options
	#   - if value==None ('null' in the original JSON); just '--key'
	if 'certificate' in conf_asset:
		raise HcpErrorGencertHxtool(f"Must not have 'certificate' property!")
	if 'name' in conf_asset:
		assetname = conf_asset.pop('name')
	else:
		assetname = asset
	assetname = f"{certprefix}{assetname}.pem"
	output_assets += [ assetname ]
	cmd += [ f'--certificate={assetname}' ]
	cmd += [ f'--type={conf_asset.pop("type")}' ]
	args = dict_pop_or(conf_asset, 'args', [])
	for prop in conf_asset:
		propval = conf_asset[prop]
		if propval:
			cmd += [ f"--{prop}={propval}" ]
		else:
			cmd += [ f"--{prop}" ]
	cmd += args

	# Policy check
	if policy_url:
		json_asset = json.dumps({ asset: copy_asset, '__env': conf_env })
		form_data = {
			'hookname': (None, 'enrollsvc::mgmt::asset_check'),
			'request_uid': (None, request_uid),
			'params': (None, json_asset)
		}
		response = requests.post(f"{policy_url}/emgmt/gencert-hxtool",
					 files = form_data)
		if response.status_code != 200:
			bail(f"policy-checker {response.status_code} refused {json_asset}")

	# Run the command
	result = subprocess.run(cmd, cwd = output_dir, text = True,
				stdout = subprocess.PIPE,
				stderr = subprocess.PIPE)
	if result.returncode != 0:
		# print(c.stdout, file = sys.stderr)
		# print(c.stderr, file = sys.stderr)
		bail(f"hxtool command failed {result.returncode}: {cmd}")

# Finally, our stdout tells the enrollment process what we produced
print(f'sensitive {" ".join(output_assets)}')
