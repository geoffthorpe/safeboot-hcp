#!/bin/bash

# To handle the case where the persistent data isn't set up, we run a subshell
# that does limited environment checks and waits for the volume to be ready.
# This follows what the mgmt container does, which launches a similar limited
# environment to _perform_ the initialization.
(
	export DB_IN_SETUP=1

	. /hcp/enrollsvc/common.sh

	expect_root

	if [[ ! -f $HCP_ENROLLSVC_STATE/initialized ]]; then
		echo "Initializing enrollsvc state"
		# This is the one-time init hook, so make sure the mounted dir
		# has appropriate ownership
		chown db_user:db_user $HCP_ENROLLSVC_STATE
		# drop_privs_*() performs an 'exec su', so we run this in a
		# child process.
		(drop_privs_db /hcp/enrollsvc/init_repo.sh)
		touch $HCP_ENROLLSVC_STATE/initialized
		echo "State now initialized"
	fi
)

# At this point, we can load (and check) the environment fully.

. /hcp/enrollsvc/common.sh

expect_root

# Persistent credentials are mounted but ownership is for root, naturally. We
# need them accessible to db_user. Easiest is to copy the directory to the
# user's home dir (which isn't persistent, so we can do this on each startup).

if [[ -z "$HCP_ENROLLSVC_SIGNER" || ! -d "$HCP_ENROLLSVC_SIGNER" ]]; then
	echo "Error, HCP_ENROLLSVC_SIGNER is not a valid directory" >&2
	exit 1
fi
if [[ -z "$HCP_ENROLLSVC_CERTISSUER" || ! -d "$HCP_ENROLLSVC_CERTISSUER" ]]; then
	echo "Error, HCP_ENROLLSVC_CERTISSUER is not a valid directory" >&2
	exit 1
fi

cp -r $HCP_ENROLLSVC_SIGNER /home/db_user/enrollsigner
cp -r $HCP_ENROLLSVC_CERTISSUER /home/db_user/enrollcertissuer

export HCP_ENROLLSVC_SIGNER=/home/db_user/enrollsigner
export HCP_ENROLLSVC_CERTISSUER=/home/db_user/enrollcertissuer

chown -R db_user $HCP_ENROLLSVC_SIGNER
chown -R db_user $HCP_ENROLLSVC_CERTISSUER

export SIGNING_KEY_PUB=$HCP_ENROLLSVC_SIGNER/key.pem
export SIGNING_KEY_PRIV=$HCP_ENROLLSVC_SIGNER/key.priv
export GENCERT_CA_CERT=$HCP_ENROLLSVC_CERTISSUER/CA.cert
export GENCERT_CA_PRIV=$HCP_ENROLLSVC_CERTISSUER/CA.priv

# Run the mgmt-specific checks (and fill in /etc/environmnet) the way all the other
# environment stuff is done inside common.sh

if [[ ! -f "$SIGNING_KEY_PUB" || ! -f "$SIGNING_KEY_PRIV" ]]; then
	echo "Error, HCP_ENROLLSVC_SIGNER ($HCP_ENROLLSVC_SIGNER) does not contain valid creds" >&2
	exit 1
fi
if [[ ! -f "$GENCERT_CA_CERT" || ! -f "$GENCERT_CA_PRIV" ]]; then
	echo "Error, HCP_ENROLLSVC_CERTISSUER ($HCP_ENROLLSVC_CERTISSUER) does not contain valid creds" >&2
	exit 1
fi

if [[ -z "$HCP_ENROLLSVC_REALM" ]]; then
	echo "Error, HCP_ENROLLSVC_REALM must be set" >&2
fi

if [[ -z "$DIAGNOSTICS" ]]; then
	export DIAGNOSTICS="false"
fi

# Append mgmt-specific settings to /etc/environment
echo "# Values filled in by enrollsvc/run_mgmt.sh after credential-handling" >> /etc/environment
echo "export SIGNING_KEY_PUB=$SIGNING_KEY_PUB" >> /etc/environment
echo "export SIGNING_KEY_PRIV=$SIGNING_KEY_PRIV" >> /etc/environment
echo "export GENCERT_CA_CERT=$GENCERT_CA_CERT" >> /etc/environment
echo "export GENCERT_CA_PRIV=$GENCERT_CA_PRIV" >> /etc/environment

# Use the passed-in values to seed the enrollment config for safeboot Note that
# we don't meddled with GENPROGS here. Instead, the "op_add" routine (ie. the
# enrollment API endpoint) copies this enroll.conf as a template and adds a
# GENPROGS setting depending on the profile of the enrollment request.
touch /safeboot/enroll.conf
chmod 644 /safeboot/enroll.conf
echo "# Autogenerated by enrollsvc/run_mgmt.sh" > /safeboot/enroll.conf
echo "export GENCERT_CA_PRIV=$GENCERT_CA_PRIV" >> /safeboot/enroll.conf
echo "export GENCERT_CA_CERT=$GENCERT_CA_CERT" >> /safeboot/enroll.conf
echo "export GENCERT_REALM=$HCP_ENROLLSVC_REALM" >> /safeboot/enroll.conf
echo "export GENCERT_KEY_BITS=2048" >> /safeboot/enroll.conf
echo "export GENCERT_X509_TOOLING=OpenSSL" >> /safeboot/enroll.conf
echo "export DIAGNOSTICS=$DIAGNOSTICS" >> /safeboot/enroll.conf
echo "POLICIES[cert]=pcr11" >> /safeboot/enroll.conf
echo "POLICIES[cert-https-client]=pcr11" >> /safeboot/enroll.conf
echo "POLICIES[cert-https-server]=pcr11" >> /safeboot/enroll.conf
echo "POLICIES[cert-pkinit-client]=pcr11" >> /safeboot/enroll.conf
echo "POLICIES[cert-pkinit-kdc]=pcr11" >> /safeboot/enroll.conf
echo "POLICIES[rootfskey]=pcr11" >> /safeboot/enroll.conf

# Print the additional configuration (beyond what common.sh prints)
echo "SIGNING_KEY_PRIV=$SIGNING_KEY_PRIV" >&2
echo "SIGNING_KEY_PUB=$SIGNING_KEY_PUB" >&2
echo "GENCERT_CA_CERT=$GENCERT_CA_CERT" >&2
echo "GENCERT_CA_PRIV=$GENCERT_CA_PRIV" >&2

echo "Running 'enrollsvc-mgmt' service"

drop_privs_flask /hcp/enrollsvc/flask_wrapper.sh
