#!/bin/bash

. /hcp/common/hcp.sh

if [[ -x /install/libexec/kdc ]]; then
	KDC_BIN=/install/libexec/kdc
elif [[ -x /usr/lib/heimdal-servers/kdc ]]; then
	KDC_BIN=/usr/lib/heimdal-servers/kdc
else
	echo "Error, no KDC binary found"
	exit 1
fi
if [[ -x /install/libexec/kpasswdd ]]; then
	KPASSWDD_BIN=/install/libexec/kpasswdd
elif [[ -x /usr/lib/heimdal-servers/kpasswdd ]]; then
	KPASSWDD_BIN=/usr/lib/heimdal-servers/kpasswdd
else
	echo "Error, no KPASSWDD binary found"
	exit 1
fi

MYETC=$HCP_KDC_STATE/etc
MYVAR=$HCP_KDC_STATE/var

# Handle first-time init of persistent state, part 1.
if [[ ! -f $HCP_KDC_STATE/initialized ]]; then

	echo "Initializing KDC state"
	if [[ -z $HCP_KDC_REALM ]]; then
		echo "Error, HCP_KDC_REALM isn't set" >&2
		exit 1
	fi
	mkdir $MYETC
	mkdir $MYVAR

	# Produce krb5.conf
	echo "Creating $MYETC/krb5.conf"
	cat > $MYETC/krb5.conf << EOF
# Autogenerated from run_kdc.sh
[libdefaults]
	default_realm = $HCP_KDC_REALM
[realms]
	$HCP_KDC_REALM = {
		kdc = $HCP_KDC_SERVER
		kpasswd_server = $HCP_KDC_SERVER
		admin_server = $HCP_KDC_SERVER
	}
[kdc]
	pkinit_identity = FILE:$MYETC/kdc-cert.pem
	pkinit_anchors = FILE:/usr/share/ca-certificates/HCP/certissuer.pem
	#pkinit_pool = PKCS12:/path/to/useful-intermediate-certs.pfx
	#pkinit_pool = FILE:/path/to/other-useful-intermediate-certs.pem
	pkinit_allow_proxy_certificate = no
	pkinit_win2k_require_binding = yes
	pkinit_principal_in_certificate = yes
EOF

	# Produce script.kadmin
	echo "Creating $MYETC/script.kadmin"
	cat > $MYETC/script.kadmin << EOF
init --realm-max-ticket-life=unlimited --realm-max-renewable-life=unlimited $HCP_KDC_REALM
ext_keytab --keytab=$MYVAR/kadmin.keytab kadmin/admin kadmin/changepw
add --use-defaults -p adminpassword adminuser@$HCP_KDC_REALM
EOF
	# Produce kdc.conf
	echo "Creating $MYETC/kdc.conf"
	cat > $MYETC/kdc.conf << EOF
[logging]
kdc = STDERR
[kdc]
database = {
  dbname = $MYVAR/heimdal
  acl = $MYETC/kadmind.acl
  log_file = $MYVAR/kdc.log
}
EOF
fi

# On all start-ups, twiddle the rootfs
echo "Repointing system config to $HCP_KDC_STATE"
if [[ -f /etc/krb5.conf ]]; then
	[[ -f /etc/krb5.conf.hcp-replaced ]] &&
		rm /etc/krb5.conf ||
		mv /etc/krb5.conf /etc/krb5.conf.hcp-replaced
fi
ln -s $MYETC/krb5.conf /etc/krb5.conf

# Handle first-time init of persistent state, part 2.
if [[ ! -f $HCP_KDC_STATE/initialized ]]; then
	echo "Initializing KDC via 'kadmin -l'"
	kadmin --config-file=$MYETC/kdc.conf -l < $MYETC/script.kadmin
	touch $HCP_KDC_STATE/initialized
fi

# Run the attestation and get our assets
# Note, run_client is not a service, it's a utility, so it doesn't retry
# forever waiting for things to be ready to succeed. We, on the other hand,
# _are_ a service, so we need to be more forgiving.
attestlog=$(mktemp)
if ! /hcp/tools/run_client.sh 2> $attestlog; then
	echo "Warning: the attestation client lost patience, error output follows;" >&2
	cat $attestlog >&2
	rm $attestlog
	echo "Warning: suppressing error output from future attestation attempts" >&2
	attestation_done=
	until [[ -n $attestation_done ]]; do
		echo "Warning: waiting 10 seconds before retring attestation" >&2
		sleep 10
		echo "Retrying attestation" >&2
		/hcp/tools/run_client.sh 2> /dev/null && attestation_done=yes
	done
fi

# Start the service and handle signals
echo "Starting the KDC"
CHILDPID_KDC=0
CHILDPID_KPASSWDD=0
trap 'kill $CHILDPID_KDC ; kill $CHILDPID_KPASSWDD' TERM QUIT
$KDC_BIN --config-file=$MYETC/kdc.conf &
CHILDPID_KDC=$!
$KPASSWDD_BIN &
CHILDPID_KPASSWDD=$!
wait $CHILDPID_KDC $CHILDPID_KPASSWDD
