#!/bin/bash

. /hcp/common/hcp.sh

add_install
need_safeboot

set -e

MYETC=$HCP_KDC_STATE/etc
MYKRB5=$MYETC/krb5.conf
MYHKDC=$MYETC/heimdal-kdc
MYSKADM=$MYHKDC/script.kadmin
MYKDCID="FILE:$MYETC/kdc-cert.pem,$MYETC/kdc-cert-key.pem"
MYCA="FILE:/usr/share/ca-certificates/HCP/HCP_TESTCRED.cert"

# Handle first-time init of persistent state, part 1.
if [[ ! -f $HCP_KDC_STATE/initialized ]]; then
	echo "Initializing KDC state"
	if [[ -z $HCP_KDC_REALM ]]; then
		echo "Error, HCP_KDC_REALM isn't set" >&2
		exit 1
	fi
	mkdir $HCP_KDC_STATE/etc
	mkdir $HCP_KDC_STATE/etc/heimdal-kdc
	mkdir $HCP_KDC_STATE/var
	mkdir $HCP_KDC_STATE/var/lib
	mkdir $HCP_KDC_STATE/var/lib/heimdal-kdc
	# Produce krb5.conf
	echo "Creating $MYKRB5"
	echo -e "# Autogenerated from run_kdc.sh" > $MYKRB5
	echo -e "[libdefaults]" >> $MYKRB5
	echo -e "\tdefault_realm = $HCP_KDC_REALM" >> $MYKRB5
	echo -e "[realms]" >> $MYKRB5
	echo -e "\t$HCP_KDC_REALM = {" >> $MYKRB5
	echo -e "\t\tkdc = $HCP_KDC_SERVER" >> $MYKRB5
	echo -e "\t\tkpasswd_server = $HCP_KDC_SERVER" >> $MYKRB5
	echo -e "\t\tadmin_server = $HCP_KDC_SERVER" >> $MYKRB5
	echo -e "\t}" >> $MYKRB5
	echo -e "[kdc]" >> $MYKRB5
	echo -e "\tpkinit_identity = $MYKDCID" >> $MYKRB5
	echo -e "\tpkinit_anchors = $MYCA" >> $MYKRB5
# 	echo -e "\tpkinit_pool = PKCS12:/path/to/useful-intermediate-certs.pfx" >> $MYKRB5
# 	echo -e "\tpkinit_pool = FILE:/path/to/other-useful-intermediate-certs.pem" >> $MYKRB5
	echo -e "\tpkinit_allow_proxy_certificate = no" >> $MYKRB5
	echo -e "\tpkinit_win2k_require_binding = yes" >> $MYKRB5
	echo -e "\tpkinit_principal_in_certificate = yes" >> $MYKRB5
	# Produce script.kadmin
	echo "Creating $MYSKADM"
	echo "init --realm-max-ticket-life=unlimited --realm-max-renewable-life=unlimited $HCP_KDC_REALM" >> $MYSKADM
	echo "ext_keytab --keytab=$MYHKDC/kadmin.keytab kadmin/admin kadmin/changepw" >> $MYSKADM
	echo "add --use-defaults -p adminpassword adminuser@$HCP_KDC_REALM" >> $MYSKADM
fi

# On all start-ups, twiddle the rootfs
echo "Repointing system config to $HCP_KDC_STATE"
[[ -f /etc/krb5.conf.hcp-replaced ]] &&
	rm /etc/krb5.conf ||
	mv /etc/krb5.conf /etc/krb5.conf.hcp-replaced
ln -s $MYKRB5 /etc/krb5.conf
[[ -d /etc/heimdal-kdc.hcp-replaced ]] &&
	rm -rf /etc/heimdal-kdc ||
	mv /etc/heimdal-kdc /etc/heimdal-kdc.hcp-replaced
ln -s $MYHKDC /etc/heimdal-kdc
[[ -d /var/lib/heimdal-kdc ]] && (
	[[ -d /var/lib/heimdal-kdc.hcp-replaced ]] &&
		rm -rf /var/lib/heimdal-kdc ||
		mv /var/lib/heimdal-kdc /var/lib/heimdal-kdc.hcp-replaced
)
ln -s $HCP_KDC_STATE/var/lib/heimdal-kdc /var/lib/heimdal-kdc

# Handle first-time init of persistent state, part 2.
if [[ ! -f $HCP_KDC_STATE/initialized ]]; then
	echo "Initializing KDC via 'kadmin -l'"
	cat $MYSKADM | kadmin -l
	touch $HCP_KDC_STATE/initialized
fi

# Run the attestation and get our assets
/hcp/tools/run_client.sh

# Start the service and handle signals
echo "Starting the KDC"
CHILDPID=0
trap '/etc/init.d/heimdal-kdc stop ; kill $CHILDPID ; exit' TERM QUIT
/etc/init.d/heimdal-kdc start
while /bin/true; do
	# Note, we background the sleep and use 'wait', because the latter
	# reacts promptly to SIGTERM. If we foreground the 'sleep', bash
	# ignores/blocks SIGTERM, which gives us a bad docker UX.
	sleep 60 &
	CHILDPID=$!
	wait "$CHILDPID"
done
