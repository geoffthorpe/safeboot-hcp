#######################################
# Defaults used by docker-compose.yml #
#######################################
#
# These can all be switched out by specifying an alternative file, using;
#    docker-compose --env-file=<path> up [...]
# And/or these can be overriden selectively by setting them in the environment
# that invokes docker-compose.

##############################
# Naming of container images #
##############################

export HCP_IMAGE_PREFIX=hcp_
export HCP_IMAGE_TAG=devel
export HCP_IMAGE_ENROLLSVC=${HCP_IMAGE_PREFIX}enrollsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_ATTESTSVC=${HCP_IMAGE_PREFIX}attestsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_SWTPMSVC=${HCP_IMAGE_PREFIX}swtpmsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_CLIENT=${HCP_IMAGE_PREFIX}client:${HCP_IMAGE_TAG}
export HCP_IMAGE_CABOODLE=${HCP_IMAGE_PREFIX}caboodle:${HCP_IMAGE_TAG}

###############################################
# Host-side credentials mounted by containers #
###############################################

# HCP cowardly (ie. wisely) refuses to make up credentials on the fly or bypass
# the need for them. Instead, the build (dev/debug) workflow creates dummy
# credentials in the ./output/creds/ path to fill the gap, and the defaults
# below ensure those creds get mounted into HCP containers. You'll want to
# customize these when deploying and integrating.

# All enrolled assets get signed, using this keypair. The directory must
# contain 'key.pem' and 'key.priv'.
# ***SECURITY***: this directory should only be available to enrollsvc_mgmt.
export HCP_CRED_ENROLL_SIGNER=./output/creds/enrollsig

# The public half of HCP_CRED_ENROLL_SIGNER, used by 'client' (and any other
# tool needing to validate enrollsvc-signed assets).
export HCP_CRED_ENROLL_VERIFIER=./output/creds/enrollverif

# The enrollsvc, by default, creates an x509 asset for each enrolled host+TPM,
# using this CA (Certificate Authority). The directory must contain 'CA.cert'
# and 'CA.priv'.
# ***SECURITY***: this directory should only be available to enrollsvc_mgmt.
# NB, the 'CA.cert' file should be copied/distributed as a "trust root" to any
# entities that the x509 asset will authenticate to.
export HCP_CRED_ENROLL_X509_CA=./output/creds/enrollca

################################
# Paths used within containers #
################################

# The following defaults are usually fine and shouldn't need changing. I.e. for
# any state you mount into a container, you can presumably mount it at the path
# the container expects it at by default. Nonetheless, HCP provides these
# controls in case you have any reason for wanting it to find state at a
# different path within the container. E.g. if the state is many subdirectories
# deep in a volume that you wish to mount, then overriding one of these
# settings might indeed be useful.

   #############
   # enrollsvc #
   #############

export HCP_ENROLLSVC_STATE_PREFIX=/enrolldb
# HCP_CRED_ENROLL_SIGNER is (typically) mounted at this path;
export HCP_ENROLLSVC_SIGNER=/enrollsig
# HCP_CRED_ENROLL_ENROLL_X509_CA is (typically) mounted at this path;
export HCP_ENROLLSVC_GENCERT=/enrollca

   #############
   # attestsvc #
   #############

export HCP_ATTESTSVC_STATE_PREFIX=/attestdb

   ############
   # swtpmsvc #
   ############

export HCP_SWTPMSVC_STATE_PREFIX=/swtpm
# This directory ends up mounted on a volume shared with client (at
# HCP_CLIENT_TPMSOCKET_DIR).
export HCP_SWTPMSVC_TPMSOCKET_DIR=/tpmsocket

   ##########
   # client #
   ##########

# Note, HCP_CRED_ENROLL_VERIFIER is (typically) mounted at this path;
export HCP_CLIENT_VERIFIER=/enrollverif
# This directory ends up mounted on a volume shared with swtpmsvc (at
# HCP_SWTPMSVC_TPMSOCKET_DIR).
export HCP_CLIENT_TPMSOCKET_DIR=/tpmsocket

##########################
# HCP application config #
##########################

# The following settings are the knobs and dials provided by the HCP
# applications (container images), excluding those already covered in the
# sections above (credentials mounted from the host, and paths used within the
# containers).

   ##########
   # common #
   ##########

export HCP_TPM_SOCKET_NAME=tpm

   #############
   # enrollsvc #
   #############

# If the enrollsvc is configured to produce Kerberos-related assets (such as
# PKI creds used for 'pkinit' bootstrapping) this is the realm. TODO: this
# global is temporary, it will eventually be consumed into an 'asset
# configuration', allowing it to be controlled on a per-asset basis.
export HCP_ENROLLSVC_REALM=FOO.NOWHERE.XYZ

   #############
   # attestsvc #
   #############

# URI of the enrollsvc that the attestsvc should clone and update from.
export HCP_ATTESTSVC_REMOTE_REPO=git://enrollsvc_repl/enrolldb

# Delay period between updates. Currently, enrollsvc and attestsvc use a
# git-based storage mechanism, and attestsvc maintains a pair of clones that
# rotate between 'current' and 'next'. Whenever an attestation request arrives,
# the processing begins in whichever clone is 'current', so this update timer
# provides a guarantee of how long that processing can be certain the
# underlying state will not change.
export HCP_ATTESTSVC_UPDATE_TIMER=10

   ############
   # swtpmsvc #
   ############

# By default, when swtpmsvc starts it will automatically create a new instance
# if it hasn't already been created. (And in this case, the 'enrollment' steps
# below may also apply.) If this is not supposed to happen, and an error should
# occur if the swtpm hasn't already been initialized, set this option
# non-empty.
export HCP_SWTPMSVC_NO_SETUP=

# By default, when swtpmsvc is first set up (created) it will automatically
# enroll itself with the appropriate enrollsvc. Setting this option non-empty
# will suppress that automatic enrollment.
export HCP_SWTPMSVC_NO_ENROLL=

# If/when the swtpmsvc tries to enroll itself, this is the hostname the TPM
# should be enrolled for. (I.e. not the hostname of the swtpm instance, the
# hostname that will be _using_ this swtpm instance.)
export HCP_SWTPMSVC_ENROLL_HOSTNAME=myhost

# If/when the swtpmsvc tries to enroll itself, this is the URL of the enrollsvc
# instance to enroll with.
export HCP_SWTPMSVC_ENROLL_API=http://enrollsvc_mgmt:5000

# This determines the unix domain socket swtpmsvc listens on. It should be on a
# shared mount with whatever host/client (presumably that is
# $HCP_SWTPMSVC_ENROLL_HOSTNAME) is trying to use the TPM.
FULLPATH=${HCP_SWTPMSVC_TPMSOCKET_DIR}/${HCP_TPM_SOCKET_NAME}
export HCP_SWTPMSVC_TPMSOCKET=${FULLPATH}

   ##########
   # client #
   ##########

# The client attempts to attest, and this is the URI of the 'attestsvc'
# instance it should attest to.
export HCP_CLIENT_ATTEST_URL=http://attestsvc_hcp:8080

FULLPATH=${HCP_CLIENT_TPMSOCKET_DIR}/${HCP_TPM_SOCKET_NAME}
export HCP_CLIENT_TPM2TOOLS_TCTI=swtpm:path=${FULLPATH}

   ############
   # caboodle #
   ############

# The command to run when 'docker-compose up caboodle' is invoked
export HCP_CABOODLE_DEFAULT_CMD=/hcp/caboodle/test.sh

# If a script fails, it will dump the failing commands stdout/stderr to stdout
# and sleep for this number of seconds. (To allow manual intervention.)
export HCP_CABOODLE_SLEEP_IF_FAIL=3600

# Because caboodle unions a lot of code from the other apps, that code consumes
# environment variables that are named accordingly. That doesn't change just
# because it's running inside caboodle. When running the 'caboodle_services'
# docker-compose target, this is fine - as the code expects all the services to
# be running as distinct containers on the network. However, the 'caboodle'
# config (aliased to 'caboodle_alone') is expected to run autonomously, with
# all services local. So it will set the HCP_CABOODLE_ALONE variable to
# indicate this to the affected test scripts, and in that case it will use the
# following HCP_CABOODLE_* vars to override corresponding enrollsvc, attestsvc,
# [...] variables.

export HCP_CABOODLE_ATTESTSVC_REMOTE_REPO=git://localhost/enrolldb
export HCP_CABOODLE_SWTPMSVC_ENROLL_API=http://localhost:5000
export HCP_CABOODLE_CLIENT_ATTEST_URL=http://localhost:8080

# Caboodle contains a soak-testing utility, and these variables set defaults
# for its operation.
export HCP_SOAK_PREFIX=/tpmsocket
export HCP_SOAK_NUM_SWTPMS=6
export HCP_SOAK_NUM_WORKERS=2
export HCP_SOAK_NUM_LOOPS=20
export HCP_SOAK_PC_ATTEST=50
# Set non-empty to prevent swtpm creation (ie. require they be precreated)
export HCP_SOAK_NO_CREATE=
