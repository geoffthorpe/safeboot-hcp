#######################################
# Defaults used by docker-compose.yml #
#######################################
#
# These can all be overriden at once by specifying an alternative file, using;
#    docker-compose --env-file=<path> up [...]
# And/or these can be overriden selectively by setting them in the environment
# that invokes docker-compose.

##############################
# Naming of container images #
##############################

export HCP_IMAGE_PREFIX=hcp_
export HCP_IMAGE_TAG=devel
export HCP_IMAGE_ENROLLSVC=${HCP_IMAGE_PREFIX}enrollsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_ATTESTSVC=${HCP_IMAGE_PREFIX}attestsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_SWTPMSVC=${HCP_IMAGE_PREFIX}swtpmsvc:${HCP_IMAGE_TAG}
export HCP_IMAGE_CLIENT=${HCP_IMAGE_PREFIX}client:${HCP_IMAGE_TAG}
export HCP_IMAGE_CABOODLE=${HCP_IMAGE_PREFIX}caboodle:${HCP_IMAGE_TAG}

###############################################
# Host-side credentials mounted by containers #
###############################################

# HCP cowardly (ie. wisely) refuses to make up credentials on the fly or bypass
# the need for them. Instead, the build (dev/debug) workflow creates dummy
# credentials in the ./output/creds/ path to fill the gap, and the defaults
# below ensure those creds get mounted into HCP containers. You'll want to
# customize these when deploying and integrating.

# All enrolled assets get signed, using this keypair. The directory must
# contain 'key.pem' and 'key.priv'.
# ***SECURITY***: this directory should only be available to enrollsvc_mgmt.
export HCP_CRED_ENROLL_SIGNATURE=./output/creds/enrollsig

# The public half of HCP_CRED_ENROLL_SIGNATURE, used by 'client' (and any other
# tool needing to validate enrollsvc-signed assets).
export HCP_CRED_ENROLL_VERIFIER=./output/creds/enrollverif

# The enrollsvc, by default, creates an x509 asset for each enrolled host+TPM,
# using this CA (Certificate Authority). The directory must contain 'CA.cert'
# and 'CA.priv'.
# ***SECURITY***: this directory should only be available to enrollsvc_mgmt.
# NB, the 'CA.cert' file should be copied/distributed as a "trust root" to any
# entities that the x509 asset will authenticate to.
export HCP_CRED_ENROLL_X509_CA=./output/creds/enrollca

##########################
# HCP application config #
##########################

# The following settings are the knobs and dials provided by the HCP
# applications (container images), excluding those already covered in the other
# sections;
# - credentials mounted from the host, which is covered further up,
# - paths used within the containers, which is covered further down.

   #############
   # enrollsvc #
   #############

# If the enrollsvc is configured to produce Kerberos-related assets (such as
# PKI creds used for 'pkinit' bootstrapping) this is the realm. TODO: this
# global is temporary, it will eventually be consumed into an 'asset
# configuration', allowing it to be controlled on a per-asset basis.
export HCP_ENROLLSVC_REALM=FOO.NOWHERE.XYZ

   #############
   # attestsvc #
   #############

# URI of the enrollsvc that the attestsvc should clone and update from.
export HCP_ATTESTSVC_REMOTE_REPO=git://enrollsvc_repl/enrolldb

# Delay period between updates. Currently, enrollsvc and attestsvc use a
# git-based storage mechanism, and attestsvc maintains a pair of clones that
# rotate between 'current' and 'next'. Whenever an attestation request arrives,
# the processing begins in whichever clone is 'current', so this update timer
# provides a guarantee of how long that processing can be certain the
# underlying state will not change.
export HCP_ATTESTSVC_UPDATE_TIMER=10

   ############
   # swtpmsvc #
   ############

# By default, when the swtpmsvc is first setup (created), it will automatically
# attempt to enroll itself with the appropriate enrollsvc. Setting this option
# non-empty will suppress that automatic enrollment.
export HCP_SWTPMSVC_NO_ENROLL=

# If/when the swtpmsvc tries to enroll itself, this is the URI of the enrollsvc
# instance to enroll with.
export HCP_SWTPMSVC_ENROLL_API=http://enrollsvc_mgmt:5000

# If/when the swtpmsvc tries to enroll itself, this is the hostname the TPM
# should be enrolled for. (I.e. not the hostname of the swtpm instance, the
# hostname that will be _using_ this swtpm instance.)
export HCP_SWTPMSVC_ENROLL_HOSTNAME=myhost

# TODO: tidy this up
export HCP_SOCKET=/tpmsocket/tpm

   ##########
   # client #
   ##########

# The client attempts to attest, and this is the URI of the 'attestsvc'
# instance it should attest to.
export HCP_CLIENT_ATTEST_URL=http://attestsvc_hcp:8080

# TODO: tidy this up
export HCP_CLIENT_TPM2TOOLS_TCTI=swtpm:path=/tpmsocket/tpm

################################
# Paths used within containers #
################################

# The following defaults are usually fine and shouldn't need changing. I.e. for
# any state you mount into a container, you can presumably mount it at the path
# the container expects it at by default. Nonetheless, HCP provides these
# controls in case you have any reason for wanting it to find state at a
# different path within the container. E.g. if the state is many subdirectories
# deep in a volume that you wish to mount, then overriding one of these
# settings might indeed be useful.

# "enrollsvc"
# Note, see the HCP_CRED_* settings that match _SIGNER and _GENCERT.
export HCP_ENROLLSVC_STATE_PREFIX=/enrolldb
export HCP_ENROLLSVC_SIGNER=/enrollsig
export HCP_ENROLLSVC_GENCERT=/enrollca

# attestsvc
export HCP_ATTESTSVC_STATE_PREFIX=/attestdb

# swtpmsvc
export HCP_SWTPMSVC_STATE_PREFIX=/swtpm

# client
# Note, see the HCP_CRED_* setting that matches _VERIFIER.
export HCP_CLIENT_VERIFIER=/enrollverif
