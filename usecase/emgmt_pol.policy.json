{
    "_": " vim: set expandtab shiftwidth=4 softtabstop=4: ",

    "start": "dispatch_hookname",
    "default": "reject",

    "filters": {

        "dispatch_hookname": [
            { "if": { "equal": ".hookname", "value": "enrollsvc::add_request" },
                "action": "jump", "jump": "add_request" },
            { "action": "return" }
        ],

        "add_request": [
            { "action": "call",
                "call": "check_caller_is_admin" },
            { "action": "reject", "if": { "not-subset": ".final_genprogs",
                "value": [
                    "genconf-krb5", "gencert-hxtool", "genhostname",
                    "genrootfskey", "gencert-issuer", "genmetadata",
                    "genreenroll", "genkrb5keytab" ] } },
            { "action": "call", "if": [
                    { "contains": ".final_genprogs", "value": "gencert-hxtool" },
                    { "exist": ".gencert-hxtool" } ],
                "call": "gencert-hxtool",
                "scope": [
                    { "import": ".", "source": ".gencert-hxtool" },
                    { "import": ".__env", "source": ".__env" } ] },
            { "name": "add_request filter chain found no problems",
                "action": "accept" } ],

        "check_caller_is_admin": {
            "_": [
                "This filter chain would check that the object had environment",
                "variables set by the TLS/HTTPS front-end that indicate a",
                "satisfactory client authentication. It should return 'reject'",
                "if unsatisfactory, otherwise 'return'. (Don't 'accept' as",
                "that terminates processing!)",
                "Here, we are assuming that access to this interface already",
                "implies that adequate authn/authz has been met.",
                "NB: this rule is only 'called' by policy hooks when client",
                "requests are first serviced. Subsequent policy hooks (such",
                "as validating all the individual assets to be created by the",
                "client request) need not do so, and likely can't do so in any",
                "case as the authn environment variables are probably gone by",
                "then. (If this rule was to run on all policy checks, it would",
                "move to the top and run in sequence rather than being called",
                "and then returning.)" ],
            "action": "return"
        },

        "gencert-hxtool": [
            { "action": "reject", "if": { "not-subset": ".list",
                "value": [
                    "default-pkinit-kdc",
                    "default-pkinit-iprop",
                    "default-https-server",
                    "default-https-hostclient",
                    "user-pkinit-user",
                    "user-pkinit-admin",
                    "user-https-client" ] } },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "default-https-hostclient" },
                    { "exist": ".default-https-hostclient" } ],
                "call": "hxtool-default-https-hostclient",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".default-https-hostclient",
                        "source1": ".<common>",
                        "source2": ".default-https-hostclient" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "default-https-server" },
                    { "exist": ".default-https-server" } ],
                "call": "hxtool-default-https-server",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".default-https-server",
                        "source1": ".<common>",
                        "source2": ".default-https-server" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "default-pkinit-kdc" },
                    { "exist": ".default-pkinit-kdc" } ],
                "call": "hxtool-default-pkinit-kdc",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".default-pkinit-kdc",
                        "source1": ".<common>",
                        "source2": ".default-pkinit-kdc" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "default-pkinit-iprop" },
                    { "exist": ".default-pkinit-iprop" } ],
                "call": "hxtool-default-pkinit-iprop",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".default-pkinit-iprop",
                        "source1": ".<common>",
                        "source2": ".default-pkinit-iprop" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "user-https-client" },
                    { "exist": ".user-https-client" } ],
                "call": "hxtool-user-https-client",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".user-https-client",
                        "source1": ".<common>",
                        "source2": ".user-https-client" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "user-pkinit-user" },
                    { "exist": ".user-pkinit-user" } ],
                "call": "hxtool-user-pkinit-user",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".user-pkinit-user",
                        "source1": ".<common>",
                        "source2": ".user-pkinit-user" } ] },
            { "action": "call", "if": [
                    { "contains": ".list", "value": "user-pkinit-admin" },
                    { "exist": ".user-pkinit-admin" } ],
                "call": "hxtool-user-pkinit-admin",
                "scope": [
                    { "import": ".", "source": "." },
                    { "union": ".user-pkinit-admin",
                        "source1": ".<common>",
                        "source2": ".user-pkinit-admin" } ] },
            { "action": "return" } ],

        "hxtool-default-https-hostclient": {
            "_": [
                "This rule (and others like it) enforce exact match over the",
                "whole struct, so there's no wiggle room to modify or add",
                "fields. The values that the environment variables may take",
                "are not constrained here, the policy simply ensures that the",
                "requested profile is exactly what it should be given the",
                "HOSTNAME and CA_ISSER_PRIV settings in the environment. The",
                "enrollsvc will probably lock down the latter of the two in",
                "its 'postclient' profile to avoid it being overriden. (Unless",
                "the path to different issuer creds is shared with the",
                "orchestration layer to allow it to choose, in which case",
                "enrollsvc might set it in the 'preclient' profile.)" ],
            "if": { "not-equal": ".default-https-hostclient", "value": {
                    "generate-key": "rsa",
                    "key-bits": "2048",
                    "lifetime": "1d",
                    "type": "https-client",
                    "subject": "UID=host,{ENROLL_HOSTNAME2DC}",
                    "hostname": "{ENROLL_HOSTNAME}",
                    "ca-certificate": "{ENROLL_CA_ISSUER_PRIV}" } },
            "action": "reject",
            "otherwise": "return" },

        "hxtool-default-https-server": {
            "_": "Exact match or fail",
            "if": { "not-equal": ".default-https-server", "value": {
                    "generate-key": "rsa",
                    "key-bits": "2048",
                    "lifetime": "1d",
                    "type": "https-server",
                    "hostname": "{ENROLL_HOSTNAME}",
                    "ca-certificate": "{ENROLL_CA_ISSUER_PRIV}" } },
            "action": "reject",
            "otherwise": "return" },

        "hxtool-default-pkinit-kdc": [
            { "_": [
                "Exact match rule for all KDCs. And unlike the earlier rules,",
                "we also impose constraints on what values the environment",
                "variables may take, specifically ENROLL_HOSTNAME." ],
                "if": { "not-equal": ".default-pkinit-kdc", "value": {
                        "generate-key": "rsa",
                        "key-bits": "2048",
                        "lifetime": "1d",
                        "type": "pkinit-kdc",
                        "pk-init-principal": "krbtgt/{ENROLL_REALM}@{ENROLL_REALM}",
                        "ca-certificate": "{ENROLL_CA_ISSUER_PRIV}" } },
                "name": "enrollsvc::asset_check::default-pkinit-kdc - bad profile",
                "action": "reject" },
            { "_": "We only issue this cert type to 2 specific hosts",
                "if": { "not-elementof": ".__env.ENROLL_HOSTNAME", "value": [
                        "primary.kdc.{ENROLL_DOMAIN}",
                        "secondary.kdc.{ENROLL_DOMAIN}" ] },
                "name": "enrollsvc::asset_check::default-pkinit-kdc - legit hosts",
                "action": "reject" },
            { "action": "return" } ],

        "hxtool-default-pkinit-iprop": [
            { "_": "Exact match required of the whole struct",
                "if": { "not-equal": ".default-pkinit-iprop", "value": {
                        "generate-key": "rsa",
                        "key-bits": "2048",
                        "lifetime": "1d",
                        "type": "pkinit-client",
                        "pk-init-principal": "iprop/{ENROLL_HOSTNAME}@{ENROLL_REALM}",
                        "subject": "CN=iprop,{ENROLL_HOSTNAME2DC}",
                        "ca-certificate": "{ENROLL_CA_ISSUER_PRIV}" } },
                "name": "enrollsvc::asset_check::default-pkinit-iprop - wrong profile",
                "action": "reject" },
            { "_": "Only issue certs to the KDC secondary",
                "if": { "not-equal": ".__env.ENROLL_HOSTNAME",
                    "value": "secondary.kdc.{ENROLL_DOMAIN}" },
                "name": "enrollsvc::asset_check::default-pkinit-iprop - legit secondary",
                "action": "reject" },
            { "action": "return" } ],

        "hxtool-user-https-client": [
            { "_": [
                "A flexible rule to allow the orchestration layer to issue",
                "https-client certificates without exact-matching the entire",
                "profile, but we limit it to specific hostnames ('aclient')",
                "and email addresses (barry@{ENROLL_DOMAIN})." ],
                "if": { "not-equal": ".user-https-client.type",
                    "value": "https-client" },
                "name": "enrollsvc::asset_check::user-https-client - bad type",
                "action": "reject" },
            { "_": "Only issue https client certs to 'aclient'",
                "if": { "not-equal": ".__env.ENROLL_HOSTNAME",
                    "value": "aclient.{ENROLL_DOMAIN}" },
                "name": "enrollsvc::asset_check::user-https-client - wrong host",
                "action": "reject" },
            { "_": "Allow 'barry' on 'aclient' host",
                "if": { "not-equal": ".user-https-client.email",
                    "value": "barry@{ENROLL_DOMAIN}" },
                "name": "enrollsvc::asset_check::user-https-client - not barry",
                "action": "reject" },
            { "action": "return" } ],

        "hxtool-user-pkinit-user": [
            { "_": "We accept specific host/user combos, otherwise reject",
                "if": { "not-equal": ".user-pkinit-user.type",
                    "value": "pkinit-client" },
                "name": "enrollsvc::asset_check::user-pkinit-user - bad type",
                "action": "reject" },
            { "_": "We only issue this cert type to specific hosts",
                "if": { "not-elementof": ".__env.ENROLL_HOSTNAME", "value": [
                        "aclient.{ENROLL_DOMAIN}",
                        "primary.kdc.{ENROLL_DOMAIN}",
                        "workstation1.{ENROLL_DOMAIN}",
                        "sherver.{ENROLL_DOMAIN}",
                        "target.{ENROLL_DOMAIN}",
                        "bigbrother.{ENROLL_DOMAIN}" ] },
                "name": "enrollsvc::asset_check::user-pkinit-user - bad host",
                "action": "reject" },
            { "_": "On 'aclient', only issue an 'alicia' cred",
                "if": [ {
                        "equal": ".__env.ENROLL_HOSTNAME",
                        "value": "aclient.{ENROLL_DOMAIN}"
                    }, {
                        "equal": ".user-pkinit-user.pk-init-principal",
                        "value": "alicia@{ENROLL_REALM}"
                    } ],
                "name": "enrollsvc::asset_check::user-pkinit-user - aclient,alicia",
                "action": "return" },
            { "_": "On 'primary.kdc', only issue a 'foo' cred",
                "if": [ {
                        "equal": ".__env.ENROLL_HOSTNAME",
                        "value": "primary.kdc.{ENROLL_DOMAIN}"
                    }, {
                        "equal": ".user-pkinit-user.pk-init-principal",
                        "value": "foo@{ENROLL_REALM}"
                    } ],
                "name": "enrollsvc::asset_check::user-pkinit-user - kdc_primary,foo",
                "action": "return" },
            { "_": [ "Lastly, on {sherver,target,workstation1,bigbrother}, issue anything",
                     "at all, otherwise fail." ],
                "if": [ {
                        "not-equal": ".__env.ENROLL_HOSTNAME",
                        "value": "sherver.{ENROLL_DOMAIN}"
                    }, {
                        "not-equal": ".__env.ENROLL_HOSTNAME",
                        "value": "target.{ENROLL_DOMAIN}"
                    }, {
                        "not-equal": ".__env.ENROLL_HOSTNAME",
                        "value": "workstation1.{ENROLL_DOMAIN}"
                    }, {
                        "not-equal": ".__env.ENROLL_HOSTNAME",
                        "value": "bigbrother.{ENROLL_DOMAIN}"
                    } ],
                "name": "enrollsvc::asset_check::user-pkinit-user - sherver, target, workstation1, bigbrother",
                "action": "reject",
                "otherwise": "return" } ],

        "hxtool-user-pkinit-admin": [
            { "_": "Similar to the hxtool-user-pkinit-user example above.",
                "if": { "not-equal": ".user-pkinit-admin.type",
                    "value": "pkinit-client" },
                "name": "enrollsvc::asset_check::user-pkinit-admin - bad type",
                "action": "reject" },
            { "_": "We only allow one hostname and one user",
                "if": [ {
                        "equal": ".__env.ENROLL_HOSTNAME",
                        "value": "aclient.{ENROLL_DOMAIN}"
                    }, {
                        "equal": ".user-pkinit-admin.pk-init-principal",
                        "value": "alicia/admin@{ENROLL_REALM}"
                    } ],
                "name": "enrollsvc::asset_check::user-pkinit-admin - aclient",
                "action": "return",
                "otherwise": "reject" } ]

    }
}
